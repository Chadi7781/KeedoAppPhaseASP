@* Generator: WebPagesHelper *@

@using System
@using System.Collections.Generic
@using System.Collections.Specialized
@using System.IO
@using System.Linq
@using System.Net
@using System.Web
@using JetBrains.Annotations
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using reCaptcha
@using reCaptcha.Extensions


@functions
{
    private const string defaultOnloadCallback = "__recaptcha_onloadCallback";

    private const string defaultWidgetRenderCallsArr = "__recaptcha_widgetRenderCallsArr";

    private const string reCaptchaVerifyUrl = "https://www.google.com/recaptcha/api/siteverify";

    private static readonly object ErrorCodesCacheKey = new object();

    internal static string GetValidationUrl(HttpContextBase context, string privateKey)
    {
        var remoteIp = context.Request.ServerVariables["REMOTE_ADDR"];
        if (String.IsNullOrEmpty(remoteIp))
        {
            throw new InvalidOperationException("reCaptcha remote IP not found");
        }

        // get user's response
        var response = (context.Request.Form["g-recaptcha-response"] ?? String.Empty).Trim();

        //
        var builder = new UriBuilder(reCaptchaVerifyUrl);
        var querystring = new NameValueCollection()
            {
                { "secret", privateKey},
                { "response", response},
                { "remoteip", remoteIp},
            };
        builder.Query = querystring.ToQueryString(false);

        return builder.ToString();
    }

    internal static string GetValidationResponse(string requestUrl)
    {
        var request = WebRequest.Create(requestUrl);

        using (var response = request.GetResponse())
        {
            var stream = response.GetResponseStream();

            if (stream == null)
                return null;

            using (var reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }
    }

    public static bool Validate([NotNull] string privateKey)
    {
        return Validate(HttpContext.Current == null ? null : new HttpContextWrapper(HttpContext.Current), privateKey);
    }


    internal static bool Validate(HttpContextBase context, [NotNull] string privateKey)
    {
        // get recaptcha validation api url
        var reqUrl = GetValidationUrl(context, privateKey);

        var response = GetValidationResponse(reqUrl);

        // no response - return false
        if (response == null)
            return false;

        // TODO: bad response will throw exception
        var responseJson = JsonConvert.DeserializeObject<dynamic>(response);

        if (responseJson == null)
            return false;

        // use the error-codes returned

        JArray jArr = responseJson["error-codes"];

        if (jArr != null)
        {
            var errorCodes = jArr.Select(e => e.ToString()).ToArray();

            var codesEnum = errorCodes.Select(EnumHelper<ErrorCodes>.GetValueFromDescription);

            // save errors
            SetLastErrors(context, codesEnum);
        }

        return responseJson.success;
    }

    internal static void SetLastErrors(HttpContextBase context, IEnumerable<ErrorCodes> value)
    {
        context.Items[ErrorCodesCacheKey] = value;
    }

    public static IEnumerable<ErrorCodes> GetLastErrors(HttpContextBase context)
    {
        context = context ?? (HttpContext.Current != null ? new HttpContextWrapper(HttpContext.Current) : null);

        if (context == null)
            return null;

        if (context.Items.Contains(ErrorCodesCacheKey))
        {
            return context.Items[ErrorCodesCacheKey] as IEnumerable<ErrorCodes>;
        }
        return null;
    }

    public static IEnumerable<string> GetLastErrorsNames(HttpContextBase context)
    {
        return GetLastErrors(context).Select(e => Enum.GetName(typeof(ErrorCodes), e));
    }

}

@**
    * return recaptcha html
    * @see {@link https://developers.google.com/recaptcha/docs/display}
    * @param {string} publicKey - Your sitekey.
    * @param {string} theme - dark/light	light	Optional. The color theme of the widget.
    * @param {string} type - audio/image	image	Optional. The type of CAPTCHA to serve.
    * @param {string} callback - Optional. Your callback function that's executed when the user submits a successful CAPTCHA response. The user's response, g-recaptcha-response, will be the input for your callback function.
    * @param {string} lang - {@link https://developers.google.com/recaptcha/docs/language}
*@
@helper GetHtml(string publicKey = null, string theme = null, string type = null, string callback = null, string lang = null)
{
if (String.IsNullOrEmpty(publicKey))
{
    throw new ArgumentException("can't be null", "publicKey");
}

    <script src="https://www.google.com/recaptcha/api.js?hl=@lang" async defer></script>
    <div class="g-recaptcha" data-sitekey="@publicKey" data-theme="@theme" data-type="@type" data-callback="@callback"></div>
}

@**
    * return recaptcha explicit html
    * @see {@link https://developers.google.com/recaptcha/docs/display}
    * @param {string} id - the recaptcha widget id.
    * @param {string} publicKey - Your sitekey.
    * @param {string} widgetRenderCallsArr - js variable name for recaptcha render calls
    * @param {string} theme - dark/light	light	Optional. The color theme of the widget.
    * @param {string} type - audio/image	image	Optional. The type of CAPTCHA to serve.
    * @param {string} callback - Optional. Your callback function that's executed when the user submits a successful CAPTCHA response. The user's response, g-recaptcha-response, will be the input for your callback function.
*@
@helper GetExplictHtml(string id, string publicKey = null, string widgetRenderCallsArr = defaultWidgetRenderCallsArr, string theme = null, string type = null, string callback = null)
{

if (String.IsNullOrEmpty(publicKey))
{
    throw new ArgumentException("can't be null", "publicKey");
}

// build options
var options = new
{
    sitekey = publicKey,
    theme = theme,
    callback = callback,
    type = type
};

var optionsJson = JsonConvert.SerializeObject(options);

var noEscapeOptionsJson = new HtmlString(optionsJson);

// add render call
    <script type="text/javascript">
        // create calls arr
        var @widgetRenderCallsArr = @widgetRenderCallsArr || [];

        var arr = @widgetRenderCallsArr;

        arr.push(function(){
            grecaptcha.render('@id', @noEscapeOptionsJson);
        });
    </script>

// recaptcha widget
    <div id="@id"></div>
}

@**
    * return recaptcha explicit script html
    * @see {@link https://developers.google.com/recaptcha/docs/display}
    * @param {string} lang - {@link https://developers.google.com/recaptcha/docs/language}
    * @param {string} load - js variable name for recaptcha on load explicit call
    * @param {string} widgetRenderCallsArr - js variable name for recaptcha render calls
*@
@helper GetExplictScript(string lang = null, string load = defaultOnloadCallback, string widgetRenderCallsArr = defaultWidgetRenderCallsArr)
{
// define explicit callback
    <script type="text/javascript">
        var @load = function() {

            var arr = @widgetRenderCallsArr || [];
            for (var i = 0; i < arr.length; i++) {
                arr[i]();
            }
        };
    </script>

// explicit call to recaptcha
    <script src="https://www.google.com/recaptcha/api.js?onload=@load&render=explicit&hl=@lang" async defer></script>
}

@helper GetJsRefresh(string id = null)
{
if (string.IsNullOrEmpty(id))
{
        <text>grecaptcha.reset();</text>
}
else
{
        <text>grecaptcha.reset('@id');</text>
}
}